{"version":3,"sources":["components/Counter.jsx","components/CounterRedux.jsx","reducer/counter/actions.js","pages/CountersPage.jsx"],"names":["Counter","value","onDelete","useState","count","setCount","className","onClick","mapDispatchToProps","increment","type","types","COUNTER_INCREMENT","payload","decrement","COUNTER_DECREMENT","setStep","step","COUNTER_SET_STEP","connect","state","counter","onChange","e","Number","target","CountersPage","counters","setCounters","prevState","id","Date","now","map","filter","handleDelete"],"mappings":"iKAuBeA,EArBC,SAAC,GAA6B,IAAD,IAA1BC,aAA0B,MAAlB,EAAkB,EAAfC,EAAe,EAAfA,SAAe,EACjBC,mBAASF,GADQ,mBACpCG,EADoC,KAC7BC,EAD6B,KAM3C,OACE,sBAAKC,UAAU,UAAf,UACE,wBAAQC,QALY,kBAAMF,EAASD,EAAQ,IAK3C,eACA,+BAAOA,IACP,wBAAQG,QANY,kBAAMF,EAASD,EAAQ,IAM3C,eAEA,wBAAQG,QAASL,EAAjB,mB,gBCgBAM,EAAqB,CACzBC,UC7B6B,SAACR,GAAD,MAAY,CACzCS,KAAMC,IAAMC,kBACZC,QAASZ,ID4BTa,UCzB6B,SAACb,GAAD,MAAY,CACzCS,KAAMC,IAAMI,kBACZF,QAASZ,IDwBTe,QCrB2B,SAACC,GAAD,MAAW,CACtCP,KAAMC,IAAMO,iBACZL,QAASI,KDsBIE,eAXS,SAACC,GAAD,MAAY,CAClCnB,MAAOmB,EAAMC,QAAQpB,MACrBgB,KAAMG,EAAMC,QAAQJ,QASkBT,EAAzBW,EA7BM,SAAC,GAAoD,IAAlDlB,EAAiD,EAAjDA,MAAOgB,EAA0C,EAA1CA,KAAMR,EAAoC,EAApCA,UAAWK,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,QACzD,OACE,sBAAKV,UAAU,gBAAf,UACE,+CACA,yBAAQL,MAAOgB,EAAMK,SAAU,SAACC,GAAD,OAAOP,EAAQQ,OAAOD,EAAEE,OAAOxB,SAA9D,UACE,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,mBAGF,wBAAQM,QAAS,kBAAMO,EAAUG,IAAjC,eACA,+BAAOhB,IACP,wBAAQM,QAAS,kBAAME,EAAUQ,IAAjC,qBEoBSS,UApCM,WAAO,IAAD,EACOvB,mBAAS,IADhB,mBAClBwB,EADkB,KACRC,EADQ,KAkBzB,OACE,sBAAKtB,UAAU,WAAf,UACE,0CAEA,wBAAQC,QAnBa,WACvBqB,GAAY,SAACC,GAAD,4BACPA,GADO,CAEV,CACEC,GAAIC,KAAKC,aAeX,2BAECL,EAASM,KAAI,gBAAGH,EAAH,EAAGA,GAAH,OACZ,cAAC,EAAD,CAAkB5B,SAAU,kBAbb,SAAC4B,GACpBF,GAAY,SAACC,GAAD,OACVA,EAAUK,QAAO,SAACb,GAAD,OAAaA,EAAQS,KAAOA,QAWTK,CAAaL,KAAjCA,MAGhB,cAAC,EAAD","file":"static/js/CountersPage.9ee9db26.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst Counter = ({ value = 0, onDelete }) => {\n  const [count, setCount] = useState(value); // [value, setValue]\n\n  const handleDecrement = () => setCount(count - 1);\n  const handleIncrement = () => setCount(count + 1);\n\n  return (\n    <div className=\"counter\">\n      <button onClick={handleDecrement}>-</button>\n      <span>{count}</span>\n      <button onClick={handleIncrement}>+</button>\n\n      <button onClick={onDelete}>X</button>\n    </div>\n  );\n};\n\n// Counter.defaultProps = {\n//   value: 0,\n// };\n\nexport default Counter;\n","import { connect } from 'react-redux';\nimport {\n  incrementAction,\n  decrementAction,\n  setStepAction,\n} from '../reducer/counter/actions';\n\nconst CounterRedux = ({ value, step, increment, decrement, setStep }) => {\n  return (\n    <div className=\"counter-redux\">\n      <h4>Counter Redux</h4>\n      <select value={step} onChange={(e) => setStep(Number(e.target.value))}>\n        <option value=\"1\">1</option>\n        <option value=\"5\">5</option>\n        <option value=\"10\">10</option>\n        <option value=\"50\">50</option>\n      </select>\n\n      <button onClick={() => decrement(step)}>-</button>\n      <span>{value}</span>\n      <button onClick={() => increment(step)}>+</button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  value: state.counter.value,\n  step: state.counter.step,\n});\n\nconst mapDispatchToProps = {\n  increment: incrementAction,\n  decrement: decrementAction,\n  setStep: setStepAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterRedux);\n","import types from './types';\n\nexport const incrementAction = (value) => ({\n  type: types.COUNTER_INCREMENT,\n  payload: value,\n});\n\nexport const decrementAction = (value) => ({\n  type: types.COUNTER_DECREMENT,\n  payload: value,\n});\n\nexport const setStepAction = (step) => ({\n  type: types.COUNTER_SET_STEP,\n  payload: step,\n});\n","import { useState } from 'react';\nimport Counter from '../components/Counter';\nimport CounterRedux from '../components/CounterRedux';\n\nconst CountersPage = () => {\n  const [counters, setCounters] = useState([]);\n\n  const handleAddCounter = () => {\n    setCounters((prevState) => [\n      ...prevState,\n      {\n        id: Date.now(),\n      },\n    ]);\n  };\n\n  const handleDelete = (id) => {\n    setCounters((prevState) =>\n      prevState.filter((counter) => counter.id !== id),\n    );\n  };\n\n  return (\n    <div className=\"counters\">\n      <h1>Counters</h1>\n\n      <button onClick={handleAddCounter}>Add a counter</button>\n\n      {counters.map(({ id }) => (\n        <Counter key={id} onDelete={() => handleDelete(id)} />\n      ))}\n\n      <CounterRedux />\n      {/* <Counter value={5} />\n      <Counter value={10} />\n      <Counter /> */}\n    </div>\n  );\n};\n\nexport default CountersPage;\n"],"sourceRoot":""}